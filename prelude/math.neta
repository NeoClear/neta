;; author: NeoClear/Yolf/Ziheng Zhuang
;; e-mail: neoclear@outlook.com
;; date: 2019-4-13

;; constants
;; FE stands for mis-calculation of float numbers
(setc (PI 3.1415926) (E 2.718281828) (FE 0.000001))

;; accuracy for math libraries
(setc (LIMIT 12))

;; mod non-builtin
(fun mod (x y)
    (- x (* y (/ x y))))

;; floor
;; integer and float
(fun floor (num) {
    (if (istype num 'int)
        num
        (if (> num 0)
            (float2int num)
            (if (= (float2int num) num)
                (float2int num)
                (- (float2int num) 1))))
})

;; ceil
;; integer and float
(fun ceil (num)
    (if (istype num 'int)
        num
        (if (= (float2int num) num)
            (float2int num)
            (+ (floor num) 1))))

;; remain
;; 0 <= return < 1
(fun remain(num)
    (d- num (floor num)))

;; quick power
;; works for integer and float
;; @import "lib.neta"
(fun qpower (base time) {
    (setl (ans 1) (neg false))
    (if (< time 0) {
        (-> (neg true))
        (-> (time (rev time)))
    } 'nil)
    (while (> time 0) {
        (if (= (mod time 2) 1)
            (-> (ans (if (istype base 'int)
                        (* ans base)
                        (d* ans base))))
            0)
        (-> (base (if (istype base 'int)
                        (* base base)
                        (d* base base))))
        (-> (time (/ time 2)))
    })
    (if neg
        (d/ 1 ans)
        ans)
})

;; calculating gcd
;; only for integer
(fun gcd (a b)
    (if (= b 0)
        a
        (gcd b (mod a b))))

;; absolute number
;; for integer and float
(fun abs (n)
    (if (< n 0)
        (if (istype n 'int)
            (- 0 n)
            (d- 0 n))
        n))

;; calculating sqrt
;; using newton mwthod
(fun sqrt (n) {
    (setl (k n))
    (while (> (abs (d- (d* k k) n)) FE) {
        (-> (k (d/ (d+ k (d/ n k)) 2)))
    })
    k
})

;; factorial
;; only integer
(fun fact (n) {
    (setl (ans 1))
    (while (> n 0) {
        (-> (ans (* ans n)))
        (-> (n (- n 1)))
    })
    ans
})

;; reverse the number
;; works for integer and float
(fun rev (n)
    (if (istype n 'int)
        (- 0 n)
        (d- 0 n)))

;; transfer angles since taylor expansion didn't work with large angle
(fun angle-cut (angle) {
    (if (> angle 0) {
        (while (> angle PI)
            (-> (angle (d- angle (d* PI 2)))))
        angle
    } {
        (while (< angle (d- 0 PI))
            (-> (angle (d+ angle (d* PI 2)))))
        angle
    })
})

;; cos
;; using taylor expansion
(fun cos (angle) {
    (setl (ans 1.0) (acc 1))
    (-> (angle (angle-cut angle)))
    (while (<= acc LIMIT) {
        (setl (node (d/ (d* (qpower -1 acc) (qpower angle (* acc 2))) (fact (* acc 2)))))
        (-> (ans (d+ ans node)))
        (-> (acc (+ acc 1)))
    })
    ans
})

;; sin
;; using taylor expansion
(fun sin (angle) {
    (setl (ans 0.0) (acc 1))
    (-> (angle (angle-cut angle)))
    (while (<= acc LIMIT) {
        (setl (node (d/ (d* (qpower -1 (- acc 1)) (qpower angle (- (* acc 2) 1))) (fact (- (* acc 2) 1)))))
        (-> (ans (d+ ans node)))
        (-> (acc (+ acc 1)))
    })
    ans
})

;; tan
;; based on sin and cos
(fun tan (angle)
    (d/ (sin angle) (cos angle)))

;; sec
;; based on cos
(fun sec (angle)
    (d/ 1 (cos angle)))

;; csc
;; based on sin
(fun csc (angle)
    (d/ 1 (sin angle)))

;; cot
;; based on tan
(fun cot (angle)
    (d/ 1 (tan angle)))

;; quick mod???
;; actually not fast
;; for fermat check
(fun qmod (base time md) {
    (setl (ans 1))
    (while (> time 0) {
        (-> (ans (mod (* ans base) md)))
        (-> (time (- time 1)))
    })
    ans
})

;; fermat check
;; only integer
;; @import "lib.neta"
(fun fermat-check (num) {
    (setl (acc 1) (flag true))
    (while (<= acc 5) {
        (if (!= (qmod (+ (mod (rand) (- num 1)) 1) (- num 1) num) 1)
            (-> (flag false))
            'nil)
        (-> (acc (+ acc 1)))
    })
    flag
})

;; ln
;; for float
(fun ln (base) {
    (if (<= base 0)
        (println "S.H.I.T.")
        0)
    (setl (ans 0.0) (cc 0.0))
    (setl (acc 1))
    (while (>= base E) {
        (-> (base (d/ base E)) (cc (d+ cc 1)))
    })
    (setl (cache (d/ (d- base 1) (d+ base 1))))
    (while (<= acc LIMIT) {
        (setl (div (- (* acc 2) 1)))
        (-> (ans (d+ ans (d/ (qpower cache div) div))))
        (-> (acc (+ acc 1)))
    })
    (d+ (d* ans 2) cc)
})

;; e-power
(fun e-power (time) {
    (setl (acc 1) (ans 1.0))
    (while (<= acc LIMIT) {
        (setl (top (qpower (remain time) acc)) (div (fact acc)))
        (-> (ans (d+ ans (d/ top div))))
        (-> (acc (+ acc 1)))
    })
    (d* ans (qpower E (floor time)))
})

;; power
(fun power (base time) {
    (setl (acc 1) (ans 1.0))
    (setl (cache (d* (remain time) (ln base))))
    (while (<= acc LIMIT) {
        (-> (ans (d+ ans (d/ (qpower cache acc) (fact acc)))))
        (-> (acc (+ acc 1)))
    })
    (d* ans (qpower base (floor time)))
})